# 坤舆编程语言 - 斐波那契数列示例
# 演示递归函数和循环的使用

# 递归方式计算斐波那契数列
函数 斐波那契_递归(n) {
    如果 (n <= 0) {
        返回 0;
    } 否则 如果 (n == 1) {
        返回 1;
    } 否则 {
        返回 斐波那契_递归(n - 1) + 斐波那契_递归(n - 2);
    }
}

# 迭代方式计算斐波那契数列（更高效）
函数 斐波那契_迭代(n) {
    如果 (n <= 0) {
        返回 0;
    } 否则 如果 (n == 1) {
        返回 1;
    }
    
    变量 a = 0;
    变量 b = 1;
    变量 结果 = 0;
    变量 i = 2;
    
    循环 (i <= n) {
        结果 = a + b;
        a = b;
        b = 结果;
        i = i + 1;
    }
    
    返回 结果;
}

# 列出前n个斐波那契数
函数 列出斐波那契数(n) {
    变量 结果列表 = 创建列表();
    变量 i = 0;
    
    循环 (i < n) {
        列表添加(结果列表, 斐波那契_迭代(i));
        i = i + 1;
    }
    
    返回 结果列表;
}

# 显示斐波那契数列
输出 "斐波那契数列演示";
输出 "=================";

# 使用递归方式计算（较小的n值）
输出 "递归方式计算:";
变量 i = 0;
循环 (i <= 10) {
    输出 "F(" + i + ") = " + 斐波那契_递归(i);
    i = i + 1;
}

输出 "";

# 使用迭代方式计算（较大的n值）
输出 "迭代方式计算(前20个):";
变量 数列 = 列出斐波那契数(20);
变量 i = 0;
变量 结果字符串 = "";

循环 (i < 列表长度(数列)) {
    变量 数字 = 列表获取(数列, i);
    结果字符串 = 结果字符串 + 数字;
    
    如果 (i < 列表长度(数列) - 1) {
        结果字符串 = 结果字符串 + ", ";
    }
    
    i = i + 1;
}

输出 结果字符串;
输出 "";
输出 "演示结束"; 